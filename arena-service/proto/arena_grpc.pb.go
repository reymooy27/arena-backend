// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: proto/arena.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArenaService_CreateArena_FullMethodName  = "/proto.ArenaService/CreateArena"
	ArenaService_DeleteArena_FullMethodName  = "/proto.ArenaService/DeleteArena"
	ArenaService_UpdateArena_FullMethodName  = "/proto.ArenaService/UpdateArena"
	ArenaService_GetArenaById_FullMethodName = "/proto.ArenaService/GetArenaById"
	ArenaService_GetArenas_FullMethodName    = "/proto.ArenaService/GetArenas"
)

// ArenaServiceClient is the client API for ArenaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArenaServiceClient interface {
	CreateArena(ctx context.Context, in *ArenaRequest, opts ...grpc.CallOption) (*ArenaResponse, error)
	DeleteArena(ctx context.Context, in *GetArenaRequest, opts ...grpc.CallOption) (*ArenaResponse, error)
	UpdateArena(ctx context.Context, in *UpdateArenaRequest, opts ...grpc.CallOption) (*ArenaResponse, error)
	GetArenaById(ctx context.Context, in *GetArenaRequest, opts ...grpc.CallOption) (*ArenaData, error)
	GetArenas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArenaResponse, error)
}

type arenaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArenaServiceClient(cc grpc.ClientConnInterface) ArenaServiceClient {
	return &arenaServiceClient{cc}
}

func (c *arenaServiceClient) CreateArena(ctx context.Context, in *ArenaRequest, opts ...grpc.CallOption) (*ArenaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArenaResponse)
	err := c.cc.Invoke(ctx, ArenaService_CreateArena_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaServiceClient) DeleteArena(ctx context.Context, in *GetArenaRequest, opts ...grpc.CallOption) (*ArenaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArenaResponse)
	err := c.cc.Invoke(ctx, ArenaService_DeleteArena_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaServiceClient) UpdateArena(ctx context.Context, in *UpdateArenaRequest, opts ...grpc.CallOption) (*ArenaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArenaResponse)
	err := c.cc.Invoke(ctx, ArenaService_UpdateArena_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaServiceClient) GetArenaById(ctx context.Context, in *GetArenaRequest, opts ...grpc.CallOption) (*ArenaData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArenaData)
	err := c.cc.Invoke(ctx, ArenaService_GetArenaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaServiceClient) GetArenas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListArenaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListArenaResponse)
	err := c.cc.Invoke(ctx, ArenaService_GetArenas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArenaServiceServer is the server API for ArenaService service.
// All implementations must embed UnimplementedArenaServiceServer
// for forward compatibility.
type ArenaServiceServer interface {
	CreateArena(context.Context, *ArenaRequest) (*ArenaResponse, error)
	DeleteArena(context.Context, *GetArenaRequest) (*ArenaResponse, error)
	UpdateArena(context.Context, *UpdateArenaRequest) (*ArenaResponse, error)
	GetArenaById(context.Context, *GetArenaRequest) (*ArenaData, error)
	GetArenas(context.Context, *emptypb.Empty) (*ListArenaResponse, error)
	mustEmbedUnimplementedArenaServiceServer()
}

// UnimplementedArenaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArenaServiceServer struct{}

func (UnimplementedArenaServiceServer) CreateArena(context.Context, *ArenaRequest) (*ArenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArena not implemented")
}
func (UnimplementedArenaServiceServer) DeleteArena(context.Context, *GetArenaRequest) (*ArenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArena not implemented")
}
func (UnimplementedArenaServiceServer) UpdateArena(context.Context, *UpdateArenaRequest) (*ArenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArena not implemented")
}
func (UnimplementedArenaServiceServer) GetArenaById(context.Context, *GetArenaRequest) (*ArenaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArenaById not implemented")
}
func (UnimplementedArenaServiceServer) GetArenas(context.Context, *emptypb.Empty) (*ListArenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArenas not implemented")
}
func (UnimplementedArenaServiceServer) mustEmbedUnimplementedArenaServiceServer() {}
func (UnimplementedArenaServiceServer) testEmbeddedByValue()                      {}

// UnsafeArenaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArenaServiceServer will
// result in compilation errors.
type UnsafeArenaServiceServer interface {
	mustEmbedUnimplementedArenaServiceServer()
}

func RegisterArenaServiceServer(s grpc.ServiceRegistrar, srv ArenaServiceServer) {
	// If the following call pancis, it indicates UnimplementedArenaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArenaService_ServiceDesc, srv)
}

func _ArenaService_CreateArena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArenaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServiceServer).CreateArena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArenaService_CreateArena_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServiceServer).CreateArena(ctx, req.(*ArenaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArenaService_DeleteArena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArenaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServiceServer).DeleteArena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArenaService_DeleteArena_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServiceServer).DeleteArena(ctx, req.(*GetArenaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArenaService_UpdateArena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArenaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServiceServer).UpdateArena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArenaService_UpdateArena_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServiceServer).UpdateArena(ctx, req.(*UpdateArenaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArenaService_GetArenaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArenaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServiceServer).GetArenaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArenaService_GetArenaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServiceServer).GetArenaById(ctx, req.(*GetArenaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArenaService_GetArenas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServiceServer).GetArenas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArenaService_GetArenas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServiceServer).GetArenas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ArenaService_ServiceDesc is the grpc.ServiceDesc for ArenaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArenaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ArenaService",
	HandlerType: (*ArenaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArena",
			Handler:    _ArenaService_CreateArena_Handler,
		},
		{
			MethodName: "DeleteArena",
			Handler:    _ArenaService_DeleteArena_Handler,
		},
		{
			MethodName: "UpdateArena",
			Handler:    _ArenaService_UpdateArena_Handler,
		},
		{
			MethodName: "GetArenaById",
			Handler:    _ArenaService_GetArenaById_Handler,
		},
		{
			MethodName: "GetArenas",
			Handler:    _ArenaService_GetArenas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/arena.proto",
}
